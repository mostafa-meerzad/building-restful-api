const express = require("express");
const Joi = require("joi");
const app = express();

app.use(express.json());
const courses = [
  { id: 1, name: "NodeJs" },
  { id: 2, name: "ReactJs" },
  { id: 3, name: "ReactNative" },
  { id: 4, name: "Javascript" },
];

app.get("/", (req, res) => {
  res.send("hello");
});

app.get("/api/courses", (req, res) => {
  res.send(courses);
});

app.get("/api/courses/:id", (req, res) => {
  // todo
  // look for the id
  // if exist return the course with given id
  // otherwise return 404
  const course = courses.find((c) => c.id === parseInt(req.params.id));
  if (course) return res.send(course);
  return res.status(404).send("course not found");
});

app.post("/api/courses/", (req, res) => {
  // todo
  // create a course
  // add to the collection of courses
  // send the new course back to the client

  // never trust the data a user sends!

  // manually checking the user input: not recommended takes a lot of time and logic!

  //   if (!req.body.name || req.body.name.length < 3)
  // return res.send(
  //   "name is required and must be at least 3 characters in length"
  // );

  // use (joi) library to validate user input
  // 1. create schema
  const schema = Joi.object({
    name: Joi.string().min(3).required(),
  });

  // 2. validate the user input using the schema
  // schema.validate(userInputObject) >>> {error: "undefined if the input value is valid", moreProps... }
  // schema.validate(userInputObject) >>> {error: "an object if the input value is not valid here is another property called message which has a message if you prefer to use that to inform the user", moreProps... }
  const result = schema.validate(req.body);

  // console.log(result.error.details[0].message) // to get the error message generated by "joi"
  if (result.error) {
    return res.status(400).send(result.error.details[0].message);
  }

  const course = {
    id: courses.length + 1,
    name: req.body.name,
  };

  courses.push(course);
  res.send(course);
});

const port = process.env.PORT || 3000;
app.listen(port, () => {
  console.log(`server listening on port: ${port}`);
});
